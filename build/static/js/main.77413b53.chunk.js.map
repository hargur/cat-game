{"version":3,"sources":["ItemGrid.tsx","data.ts","GridView.tsx","Board.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GridItem","props","react_default","a","createElement","key","id","alt","image","src","style","width","height","ItemGrid","flex","data","map","item","onClick","clickedItem","itemData","GridView","justifyContent","display","items","index","float","border","textAlign","ItemGrid_GridItem","Board","_useState","useState","Array","fill","_useState2","Object","slicedToArray","cloneState","setCloneState","_useState3","_useState4","lastFilledValue","setLastFilledValue","_useState5","_useState6","win","setwin","useEffect","alert","alignItems","src_ItemGrid","value","addedItem","src_GridView","App","src_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.77413b53.chunk.js","sourcesContent":["import React from 'react';\nimport { ItemType } from './types';\n\nexport interface ItemGridProp{\n  data: ItemType[]\n  clickedItem: any\n}\n\n\n/*<GridItem id={item.id} image={item.image} clicked={() => props.clickedItem}/>*/\n\nexport const GridItem = (props: ItemType) => (\n  <img key={props.id} \n      alt={props.image} \n      src={props.image}\n      style={{width: 'auto', height: '100%'}}\n  />\n      \n)\nconst ItemGrid = (props: ItemGridProp) => {\n  return <div style={{flex: 1}}>\n    {props.data.map((item: ItemType) => (\n      <img onClick={() => {props.clickedItem(item)}} \n      key={item.id} \n      alt={item.image} \n      style={{width: '25%'}} \n      src={item.image}/>)\n      )}\n  </div>\n}\n\nexport default ItemGrid","export const itemData = [{\n    id: 1,\n    image: 'images/cat_1.png'\n},{\n    id: 2,\n    image: 'images/cat_2.png'\n},{\n    id: 3,\n    image: 'images/cat_3.png'\n},{\n    id: 4,\n    image: 'images/cat_4.png'\n},{\n    id: 5,\n    image: 'images/cat_5.png'\n},{\n    id: 6,\n    image: 'images/cat_6.png'\n},{\n    id: 7,\n    image: 'images/cat_7.png'\n},{\n    id: 8,\n    image: 'images/cat_8.png'\n},{\n    id: 9,\n    image: 'images/cat_9.png'\n},{\n    id: 10,\n    image: 'images/cat_10.png'\n},{\n    id: 11,\n    image: 'images/cat_11.png'\n},{\n    id: 12,\n    image: 'images/cat_12.png'\n},\n]","import React from 'react';\nimport { GridItem } from './ItemGrid';\n\nexport interface GridViewProps{\n  items: any[]\n}\n\nconst GridView = (props: GridViewProps) => {\n  return <div style={{flex: 1, justifyContent: 'center', display: 'flex'}}>\n    <div style={{width:190}}>{props.items.map((item, index) => <div key={index} style={{ float: 'left', width:60, height: 60, border: '1px solid lightblue', textAlign: 'center'}}>\n      {item && item.id && <GridItem id={item.id} image={item.image} />}\n    </div>)}</div>\n  </div>\n}\n\nexport default GridView","import React, { useState, useEffect } from 'react';\nimport ItemGrid from './ItemGrid'\nimport {itemData} from './data'\nimport { ItemType } from './types';\nimport GridView from './GridView';\n\nconst Board = () => {\n  const [cloneState, setCloneState] = useState(new Array(9).fill(''))\n  const [lastFilledValue, setLastFilledValue] = useState(0)\n  const [win,setwin]=useState('YOU WON')\n\n  const handleState = (value: ItemType) => {\n    let addedItem = cloneState;\n    addedItem[lastFilledValue] = value\n    setLastFilledValue(lastFilledValue+1)\n    setCloneState(addedItem)\n\n    //to check the values in a row\n    if((lastFilledValue+1) % 3 === 0 ){\n      if(addedItem[lastFilledValue].id === addedItem[lastFilledValue -1].id || addedItem[lastFilledValue - 1].id === addedItem[lastFilledValue - 2].id || addedItem[lastFilledValue - 1].id === addedItem[lastFilledValue].id){\n        setwin(\"YOU LOST\")\n      }\n    }\n  }\n\n  //Works as component didupdate\n  useEffect(()=> {\n    //when last row is filled, print result\n    if(lastFilledValue === 9){\n      alert(win)\n      setCloneState(new Array(9).fill(''))\n      setLastFilledValue(0)\n    }\n\n  },[cloneState,lastFilledValue,win])\n\n  return <div style={{display: 'flex', alignItems: 'center'}}>\n    <ItemGrid data={itemData} clickedItem={handleState}/>\n    {cloneState && <GridView items={cloneState}/>}\n    </div>\n}\n\nexport default Board","import React from 'react';\nimport Board from './Board'\n\nconst App: React.FC = (props) => <Board/>\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}